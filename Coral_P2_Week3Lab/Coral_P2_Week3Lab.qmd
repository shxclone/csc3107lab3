---
title: "Week 3 Lab: Exploring ggplot2"
author: "Coral Team"
format: html
date: "2025-05-20"
editor: visual
---

```{r}
#| label: load-libraries
#| message: false

# Load necessary packages
library(tidyverse)
library(palmerpenguins)
library(ggbeeswarm)
library(ggplot2)
library(hexbin)
```

```{r}
#| label: load-data
#| message: false
data("penguins", package = "palmerpenguins")
```

# Visualizing the Distribution of Quantitative Data: Bill Lengths of Pygoscelis Penguins

## 1.1 Remove Missing Values

```{r}
#| label: remove-missing

penguins_clean <- drop_na(penguins, bill_length_mm)

# Check how many rows were removed
cat("Original dataset size:", nrow(penguins), "\n")
cat("Clean dataset size:", nrow(penguins_clean), "\n")
cat("Number of rows removed:", nrow(penguins) - nrow(penguins_clean))
```

## 1.2 Scatter Plot of Species versus Bill Length

```{r}
#| label: scatter-plot
#| echo: false
#| fig.width: 10
#| fig.height: 6

ggplot(penguins_clean, aes(x = bill_length_mm, y = species)) +
  geom_point() +
  labs(title = "Scatter Plot of Species vs. Bill Length",
       x = "Bill Length (mm)",
       y = "Species",
       caption = "Gorman et al. (2014)")
```

## 1.3 Why Should You Jitter the Plot?

```{r}
#| label: duplicates

# Count occurrences of each bill length within each species
bill_length_counts <- penguins_clean |>
  group_by(species, bill_length_mm) |>
  summarise(count = n(), .groups = "drop") |>
  filter(count > 1) |>
  arrange(desc(count))

# Display cases where multiple penguins have the same bill length within a species
print(bill_length_counts)

# Count how many points would overlap in our plot
overlapping_points <- sum(bill_length_counts$count)
total_points <- nrow(penguins_clean)
overlap_percentage <- overlapping_points / total_points * 100

cat("Number of overlapping points:", overlapping_points, "\n")
cat("Percentage of dataset with overlapping points:", round(overlap_percentage, 2), "%")
```

> The table above shows instances where multiple penguins of the same species have identical bill lengths. This would result in overlapping points on our scatter plot, making it difficult to see the true distribution of the data. This is why jittering the plot would be beneficial - it adds a small amount of random noise to the position of each point to prevent overlap.

## 1.4 Jitter Plot

```{r}
#| label: jitter-plot

ggplot(penguins_clean, aes(x = bill_length_mm, y = species)) +
  geom_jitter(alpha = 0.6, width = 0, height = 0.2) +
  labs(
    title = "Bill Length by Penguin Species (Jittered)",
    x = "Bill Length (mm)",
    y = "Species",
    caption = "Source: Gorman et al. (2014)"
  ) +
  theme_minimal()
```

## 1.5 Bee-Swarm Plot

```{r}
#| label: beeswarm-plot

ggplot(penguins_clean, aes(x = bill_length_mm, y = species)) +
  geom_beeswarm() +
  labs(
    title = "Bill Length by Penguin Species (Bee-swarm)",
    x = "Bill Length (mm)",
    y = "Species",
    caption = "Source: Gorman et al. (2014)"
  ) +
  theme_minimal()
```

## 1.6 Pros and Cons of Bee-Swarm Plots

> **Advantage of bee-swarm plot:**  
> Unlike jitter plots where points are randomly displaced, bee-swarm plots position points in a deterministic way that prevents overlapping. This allows viewers to see each individual data point while still maintaining the accurate distribution of bill lengths along the x-axis. The density of points at any given x-value directly represents the frequency of that value.
>  
> **Disadvantage of bee-swarm plot:**  
> Bee-swarm plots can take up more vertical space than jitter plots when there are many overlapping values, which can make them less space-efficient. Additionally, for very large datasets, bee-swarm plots might become visually cluttered and computationally intensive to render.

## 1.7 Violin Plot with Boxes

```{r}
#| label: violin-box-plot

ggplot(penguins_clean, aes(x = bill_length_mm, y = species)) +
  geom_violin() +
  geom_boxplot(width = 0.2, fill = "white", alpha = 0.7) +
  labs(
    title = "Distribution of Bill Length by Penguin Species",
    x = "Bill Length (mm)",
    y = "Species",
    caption = "Source: Gorman et al. (2014)"
  ) +
  theme_minimal()
```

## 1.8 What Does a Violin Plot Add to a Box Plot?

> A violin plot provides additional information that is not directly visible in a box plot:  
>  
>   1. The violin plot shows the full probability density of the data across all values, revealing nuances in the distribution such as bimodality, skewness, or multiple peaks that are not visible in a box plot.
>   2. While a box plot only shows five summary statistics (minimum, first quartile, median, third quartile, maximum), the violin plot shows the density estimate at every point along the range of values, giving a more complete picture of where data points are concentrated.
>   3. The width of the violin at any given point represents the density of data at that value, making it easier to visualize exactly where most observations cluster, which cannot be determined from a box plot alone.

## 1.9 Frequency Polygons with Rug Plot

```{r}
#| label: frequency-polygon-rug

ggplot(penguins_clean, aes(x = bill_length_mm, color = species)) +
  geom_freqpoly(binwidth = 1) +
  geom_rug(alpha = 0.5) +
  labs(
    title = "Frequency Distribution of Bill Length by Penguin Species",
    x = "Bill Length (mm)",
    y = "Count",
    color = "Species",
    caption = "Source: Gorman et al. (2014)"
  ) +
  theme_minimal()
```

## 1.10 Faceted Frequency Polygons with Rug Plots

```{r}
#| label: faceted-frequency-polygon

ggplot(penguins_clean, aes(x = bill_length_mm)) +
  geom_freqpoly(binwidth = 1) +
  geom_rug(alpha = 0.7) +
  facet_wrap(~ species, ncol = 1) +
  labs(
    title = "Frequency Distribution of Bill Length by Penguin Species",
    x = "Bill Length (mm)",
    y = "Count",
    caption = "Source: Gorman et al. (2014)"
  ) +
  theme_minimal()
```

## 1.11 Pros and Cons of Faceting

> **Strength of faceted plot:**  
> Each species is displayed in its own panel with its own y-axis scale, which makes it easier to see the distribution within each species independently. This is particularly valuable when the counts or frequencies differ substantially between groups, as the shape of the distribution for species with fewer observations is not visually dominated by species with more observations.
>  
> **Weakness of faceted plot:**  
> Direct comparison between species is more difficult in the faceted plot because they're in separate panels with different scales. In the non-faceted plot (1.9), it's easier to immediately see how the distributions overlap and compare their positions relative to each other on the x-axis. Additionally, faceting takes up more space on the page, which can be inefficient for simple comparisons.

## 1.12 Unmarked Bonus Question: Pairwise 𝑡-Test


```{r}
penguins_clean %>%
  group_by(species) %>%
  summarise(mean_bill = mean(bill_length_mm, na.rm = TRUE))

pairwise.t.test(penguins_clean$bill_length_mm, penguins_clean$species)

```

# 2 Find a Data Set to Demonstrate Mitigation of Overplotting

> Use the "Diamonds" dataset included in the ggplot2 package.  
> This dataset contains prices and attributes of approximately 54,000 diamonds.  
> Create a subset that meets the required conditions.  

```{r load-diamonds-data}
#| label: load-diamonds-data

# Load the diamonds dataset (included in ggplot2)
data(diamonds)

# Create a meaningful subset with 400 observations
set.seed(123) # For reproducibility
diamonds_subset <- diamonds |>
  slice_sample(n = 400)

# Display the first few rows
head(diamonds_subset)
```

## 2.1 Data Source and Description
>  The diamonds dataset comes from the ggplot2 package and is a built-in dataset in R. It contains information about diamonds, including their carat weight, cut quality, color, clarity, price, and physical dimensions (depth, table, x, y, z). This dataset is particularly useful for examining relationships between diamond attributes and prices.

## 2.2 Validation of Conditions
```{r validate-conditions}
#| label: validate-conditions

# Condition C: Between 20 and 500 observations
cat("Number of observations:", nrow(diamonds_subset), "\n")

# Condition D: At least two quantitative variables
cat("Quantitative variables: carat, price, depth, table, x, y, z\n")

# Condition E: At least one pair of data points with identical values
# Check for duplicate values in the carat and price columns
duplicate_points <- diamonds_subset |>
  group_by(carat, price) |>
  filter(n() > 1) |>
  ungroup()

cat("Number of duplicate points:", nrow(duplicate_points), "\n")

# If no duplicates are found in carat and price, check other combinations
if (nrow(duplicate_points) == 0) {
  duplicate_points <- diamonds_subset |>
    group_by(depth, table) |>
    filter(n() > 1) |>
    ungroup()
  
  cat("Number of duplicate points (depth & table):", nrow(duplicate_points), "\n")
}

if (nrow(duplicate_points) > 0) {
  cat("Sample of duplicate points:\n")
  print(head(duplicate_points))
}
```

## 2.3 Scatter Plot with geom_point()

```{r scatter-plot-diamonds}
#| label: basic-scatter-plot

ggplot(diamonds_subset, aes(x = carat, y = price)) +
  geom_point() +
  labs(
    title = "Relationship between Diamond Carat Weight and Price",
    x = "Carat",
    y = "Price (USD)",
    caption = "Source: ggplot2 diamonds dataset"
  ) +
  theme_minimal()
```

## 2.4 Mitigating Overplotting
### Method 1: Alpha Transparency with Point Size Adjustment
```{r alpha-size}
#| label: alpha-size

ggplot(diamonds_subset, aes(x = carat, y = price)) +
  geom_point(alpha = 0.6, size = 2) +
  labs(
    title = "Diamond Carat vs. Price with Alpha Transparency",
    x = "Carat",
    y = "Price (USD)",
    caption = "Source: ggplot2 diamonds dataset"
  ) +
  theme_minimal()
```

> **Advantages:**  
>  
>   - Simple to implement and intuitive to understand
>   - Preserves all data points while making overlaps visible through transparency
>   - Increasing point size makes individual points more visible
>   - No distortion of the true values (unlike jittering)
>  
> **Disadvantages:**
>  
>   - In areas of high density, even with transparency, points can still overlap significantly
>   - Larger point sizes can create more visual clutter
>   - Does not quantify the degree of overplotting precisely
>   - Limited effectiveness for very large datasets

### Method 2: Hexagonal Binning
```{r hexagonal-binning}
#| label: hexbin

ggplot(diamonds_subset, aes(x = carat, y = price)) +
  geom_hex(bins = 15) +
  scale_fill_viridis_c() +
  labs(
    title = "Diamond Carat vs. Price with Hexagonal Binning",
    x = "Carat",
    y = "Price (USD)",
    fill = "Count",
    caption = "Source: ggplot2 diamonds dataset"
  ) +
  theme_minimal()
```

> **Advantages:**  
>  
>   - Effectively summarizes dense regions with color-coded bins
>   - Provides a clear visual representation of point density
>   - Works well for large datasets where individual points are less important
>   - The hexagonal shape efficiently tiles the plane without visual artifacts
>  
> **Disadvantages:**
>  
>   - Individual data points are not represented
>   - Requires careful selection of bin size
>   - Can be less intuitive for audiences unfamiliar with this visualization type
>   - May hide specific outliers or interesting individual observations

## 2.5 Visualizing Trends 
### Method 1: Smoothing Interpolations
```{r smoothing-interpolation}
#| label: gam-smoothing

ggplot(diamonds_subset, aes(x = carat, y = price)) +
  geom_point(alpha = 0.4) +
  geom_smooth(method = "gam", se = TRUE, color = "blue") +
  labs(
    title = "Diamond Carat vs. Price with GAM Smoothing",
    x = "Carat",
    y = "Price (USD)",
    caption = "Source: ggplot2 diamonds dataset"
  ) +
  theme_minimal()
```

> **Strengths:**  
>  
>   - Generalized Additive Models (GAM) are excellent at capturing non-linear relationships
>   - Provides confidence intervals to show uncertainty in the trend
>   - More flexible than linear models but less prone to overfitting than LOESS for larger datasets
>   - Good at revealing the overall trend while being robust to outliers
>  
> **Weaknesses:**
>  
>   - Requires the mgcv package (which is automatically loaded by geom_smooth)
>   - The mathematical basis might be harder to explain to non-statistical audiences
>   - Default parameter settings might not always be optimal
>   - Computationally more intensive than simple linear models

### Method 2: Faceted Smoothing by Cut Quality
```{r faceted-smoothing}
#| label: facet-smoothing

ggplot(diamonds_subset, aes(x = carat, y = price, color = cut)) +
  geom_point(alpha = 0.4) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~ cut) +
  labs(
    title = "Diamond Carat vs. Price by Cut Quality",
    x = "Carat",
    y = "Price (USD)",
    color = "Cut Quality",
    caption = "Source: ggplot2 diamonds dataset"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
```

> **Strengths:**
>  
>   - Separating by groups (cut quality) reveals how price-carat relationships vary by diamond quality
>   - Allows comparison of trends across different categories
>   - Faceting creates cleaner, less cluttered individual plots
>   - Provides a multi-dimensional analysis in an organized layout
>  
> **Weaknesses:**  
>  
>   - Direct comparison between facets requires more cognitive effort
>   - Reduced plot size for each facet may obscure details
>   - Uses more space on the page
>   - The scales across facets are the same, which might not be ideal if groups have vastly different ranges